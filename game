import pygame
import random
import os

# Initialize Pygame
pygame.init()

# Get display dimensions
os.environ['SDL_VIDEO_CENTERED'] = '1'  # Center the window
infoObject = pygame.display.Info()
SCREEN_WIDTH = infoObject.current_w
SCREEN_HEIGHT = infoObject.current_h

# Constants
GAME_WIDTH = 300
GAME_HEIGHT = 600
SIDE_PANEL_WIDTH = 200
BLOCK_SIZE = 30
GRID_WIDTH = GAME_WIDTH // BLOCK_SIZE
GRID_HEIGHT = GAME_HEIGHT // BLOCK_SIZE
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GRAY = (100, 100, 100)
RED = (255, 0, 0)
CYAN = (0, 255, 255)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
ORANGE = (255, 165, 0)
YELLOW = (255, 255, 0)
PURPLE = (128, 0, 128)
DARK_BLUE = (0, 0, 139)

# Tetrominos
tetrominos = [
    [[1, 1, 1, 1]],  # I piece
    [[2, 2, 2],
     [0, 2, 0]],    # T piece
    [[3, 3, 0],
     [0, 3, 3]],    # S piece
    [[0, 4, 4],
     [4, 4, 0]],    # Z piece
    [[5, 5, 5, 5]],  # L piece
    [[6, 6],
     [6, 6]],       # O piece
    [[7, 7, 7],
     [0, 0, 7]]     # J piece
]

# Create a new window
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Tetris")

# Initialize clock
clock = pygame.time.Clock()

def draw_grid(surface, x_offset, y_offset):
    for x in range(0, GAME_WIDTH, BLOCK_SIZE):
        pygame.draw.line(surface, GRAY, (x + x_offset, y_offset), (x + x_offset, GAME_HEIGHT + y_offset))
    for y in range(0, GAME_HEIGHT, BLOCK_SIZE):
        pygame.draw.line(surface, GRAY, (x_offset, y + y_offset), (GAME_WIDTH + x_offset, y + y_offset))

def new_piece():
    piece = random.choice(tetrominos)
    return piece, 0, GRID_WIDTH // 2 - len(piece[0]) // 2

def draw_piece(surface, piece, offset):
    for y, row in enumerate(piece):
        for x, cell in enumerate(row):
            if cell:
                pygame.draw.rect(surface, colors[cell], (offset[1] * BLOCK_SIZE + x * BLOCK_SIZE,
                                                          offset[0] * BLOCK_SIZE + y * BLOCK_SIZE,
                                                          BLOCK_SIZE, BLOCK_SIZE))

def draw_next_piece(surface, next_piece):
    # Calculate position to draw the next piece
    next_piece_x = GAME_WIDTH + (SCREEN_WIDTH - GAME_WIDTH - SIDE_PANEL_WIDTH) // 2 + BLOCK_SIZE
    next_piece_y = (SCREEN_HEIGHT - GAME_HEIGHT) // 2 + 2 * BLOCK_SIZE

    # Clear the area for the next piece
    pygame.draw.rect(surface, BLACK, (next_piece_x, next_piece_y, 4 * BLOCK_SIZE, 4 * BLOCK_SIZE))

    # Draw the next piece
    for y, row in enumerate(next_piece):
        for x, cell in enumerate(row):
            if cell:
                pygame.draw.rect(surface, colors[cell], (next_piece_x + x * BLOCK_SIZE,
                                                          next_piece_y + y * BLOCK_SIZE,
                                                          BLOCK_SIZE, BLOCK_SIZE))

def collide(piece, offset, grid):
    for y, row in enumerate(piece):
        for x, cell in enumerate(row):
            if cell:
                if offset[0] + y >= GRID_HEIGHT or offset[1] + x < 0 or offset[1] + x >= GRID_WIDTH or grid[offset[0] + y][offset[1] + x]:
                    return True
    return False

def merge(piece, offset, grid):
    for y, row in enumerate(piece):
        for x, cell in enumerate(row):
            if cell:
                grid[offset[0] + y][offset[1] + x] = cell

def check_lines(grid):
    lines = 0
    for i, row in enumerate(grid):
        if all(cell != 0 for cell in row):
            del grid[i]
            grid.insert(0, [0 for _ in range(GRID_WIDTH)])
            lines += 1
    return lines

# Colors for tetrominos
colors = {1: CYAN, 2: PURPLE, 3: GREEN, 4: RED, 5: ORANGE, 6: YELLOW, 7: DARK_BLUE}

grid = [[0] * GRID_WIDTH for _ in range(GRID_HEIGHT)]
piece, piece_y, piece_x = new_piece()
next_piece, next_piece_y, next_piece_x = new_piece()
game_over = False
score = 0

# Movement flags
move_left = False
move_right = False

# Timer for continuous movement
move_timer = 0
MOVE_DELAY = 750  # milliseconds

# Create a surface for the game area
game_surface = pygame.Surface((GAME_WIDTH, GAME_HEIGHT))
game_surface.fill(BLACK)

while not game_over:
    screen.fill(BLACK)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            game_over = True

        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                move_left = True
            elif event.key == pygame.K_RIGHT:
                move_right = True
            elif event.key == pygame.K_UP:
                rotated_piece = [list(row) for row in zip(*piece[::-1])]
                if not collide(rotated_piece, (piece_y, piece_x), grid):
                    piece = rotated_piece
            elif event.key == pygame.K_SPACE:
                # Instantly move the piece down
                while not collide(piece, (piece_y + 1, piece_x), grid):
                    piece_y += 1
                merge(piece, (piece_y, piece_x), grid)
                lines_cleared = check_lines(grid)
                score += lines_cleared
                piece, piece_y, piece_x = next_piece, next_piece_y, next_piece_x
                next_piece, next_piece_y, next_piece_x = new_piece()
                if collide(piece, (piece_y, piece_x), grid):
                    game_over = True

        elif event.type == pygame.KEYUP:
            if event.key == pygame.K_LEFT:
                move_left = False
            elif event.key == pygame.K_RIGHT:
                move_right = False

    # Continuous movement
    if move
